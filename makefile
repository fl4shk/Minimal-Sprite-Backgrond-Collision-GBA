# Edit these variables if more directories are needed.
# Separate each entry by spaces.


# THUMB Mode C++ Code
CXX_DIRS=$(CURDIR) src src/misc_helper_stuff src/gba_specific_stuff src/test_level

# THUMB Mode C Code
C_DIRS=$(CURDIR) src src/misc_helper_stuff src/gba_specific_stuff

# ARM Mode C++ Code
ARM_CXX_DIRS=$(CURDIR) src src/misc_helper_stuff src/gba_specific_stuff

# ARM Mode C Code
ARM_C_DIRS=$(CURDIR) src src/misc_helper_stuff src/gba_specific_stuff


# ARM or THUMB Mode ASM Code
S_DIRS=$(CURDIR) src src/asm src/misc_helper_stuff src/gfx src/gba_specific_stuff



PROJ=$(shell basename $(CURDIR))



# This compiler prefix is ARM-specific
COMP_PREFIX=arm-none-eabi-


CC=$(COMP_PREFIX)gcc
CXX=$(COMP_PREFIX)g++
AS=$(COMP_PREFIX)as
#AS=$(COMP_PREFIX)gcc
#LD=$(COMP_PREFIX)ld
LD=$(COMP_PREFIX)g++
OBJDUMP=$(COMP_PREFIX)objdump
OBJCOPY=$(COMP_PREFIX)objcopy


LD_SCRIPT=linkscript.ld


#DEBUG_FLAGS=-gdwarf-2 -ggdb -gstrict-dwarf

GLOBAL_BASE_FLAGS=-mcpu=arm7tdmi -mtune=arm7tdmi


THUMB_BASE_FLAGS=$(GLOBAL_BASE_FLAGS) -mthumb -mthumb-interwork
ARM_BASE_FLAGS=$(GLOBAL_BASE_FLAGS) -marm -mthumb-interwork


CXX_FLAGS=-std=c++14 $(THUMB_BASE_FLAGS) -O3 -D __thumb__  #-Wall
C_FLAGS=-std=c11 $(THUMB_BASE_FLAGS) -O3 -D __thumb__ -Wall

ARM_CXX_FLAGS=-std=c++14 $(ARM_BASE_FLAGS) -O3  -Wall
ARM_C_FLAGS=-std=c11 $(ARM_BASE_FLAGS) -O3 -Wall

S_FLAGS=-mcpu=arm7tdmi -mthumb -mthumb-interwork

#LD_FLAGS=$(EXTRA_LD_FLAGS) -Ttext-segment=0x08000000 -Tbss=0x0
LD_FLAGS=--specs=nosys.specs $(EXTRA_LD_FLAGS) -T $(LD_SCRIPT) -Wl,--entry=_start2 `arm-none-eabi-gcc -print-file-name=thumb/libgcc.a` `arm-none-eabi-gcc -print-file-name=thumb/libc.a` `arm-none-eabi-gcc -print-file-name=thumb/libstdc++.a`  -lgcc -lc -lstdc++ $(DEBUG_FLAGS)
#LD_FLAGS=--specs=nosys.specs $(EXTRA_LD_FLAGS) -T $(LD_SCRIPT) `arm-none-eabi-gcc -print-libgcc-file-name` `arm-none-eabi-gcc -print-file-name=libc.a` -lgcc -lc $(DEBUG_FLAGS)


OBJDIR=objs
ASMOUTDIR=asmouts
DEPDIR=deps
OBJDIR_TEMP=objs_temp


CXX_SOURCES=$(foreach DIR,$(CXX_DIRS),$(notdir $(wildcard $(DIR)/*.thumb.cpp)))
C_SOURCES=$(foreach DIR,$(C_DIRS),$(notdir $(wildcard $(DIR)/*.thumb.c)))

ARM_CXX_SOURCES=$(foreach DIR,$(ARM_CXX_DIRS), \
	$(notdir $(wildcard $(DIR)/*.arm.cpp)))
ARM_C_SOURCES=$(foreach DIR,$(ARM_C_DIRS),$(notdir $(wildcard $(DIR)/*.arm.c)))

S_SOURCES=$(foreach DIR,$(S_DIRS),$(notdir $(wildcard $(DIR)/*.s)))

export VPATH	:=	$(foreach DIR,$(CXX_DIRS),$(CURDIR)/$(DIR)) \
	$(foreach DIR,$(C_DIRS),$(CURDIR)/$(DIR)) \
	\
	$(foreach DIR,$(ARM_CXX_DIRS),$(CURDIR)/$(DIR)) \
	$(foreach DIR,$(ARM_C_DIRS),$(CURDIR)/$(DIR)) \
	\
	$(foreach DIR,$(S_DIRS),$(CURDIR)/$(DIR)) \


# Object code files
CXX_OFILES=$(patsubst %.thumb.cpp,$(OBJDIR)/%.o,$(CXX_SOURCES))
C_OFILES=$(patsubst %.thumb.c,$(OBJDIR)/%.o,$(C_SOURCES))

ARM_CXX_OFILES=$(patsubst %.arm.cpp,$(OBJDIR)/%.o,$(ARM_CXX_SOURCES))
ARM_C_OFILES=$(patsubst %.arm.c,$(OBJDIR)/%.o,$(ARM_C_SOURCES))

S_OFILES=$(patsubst %.s,$(OBJDIR)/%.o,$(S_SOURCES))
OFILES=$(CXX_OFILES) $(C_OFILES) $(ARM_CXX_OFILES) $(ARM_C_OFILES) \
	$(S_OFILES)


# Automatically-Generated Dependency Files
CXX_PFILES=$(patsubst %.thumb.cpp,$(DEPDIR)/%.P,$(CXX_SOURCES))
C_PFILES=$(patsubst %.thumb.c,$(DEPDIR)/%.P,$(C_SOURCES))

ARM_CXX_PFILES=$(patsubst %.arm.cpp,$(DEPDIR)/%.P,$(ARM_CXX_SOURCES))
ARM_C_PFILES=$(patsubst %.arm.c,$(DEPDIR)/%.P,$(ARM_C_SOURCES))

S_PFILES=$(patsubst %.s,$(DEPDIR)/%.P,$(S_SOURCES))
PFILES=$(CXX_PFILES) $(C_PFILES) $(ARM_CXX_PFILES) $(ARM_C_PFILES) \
	$(S_PFILES)


# This is for cleaning object files with no source.
CXX_OFILES_TEMP=$(patsubst %.thumb.cpp,$(OBJDIR_TEMP)/%.o,$(CXX_SOURCES))
C_OFILES_TEMP=$(patsubst %.thumb.c,$(OBJDIR_TEMP)/%.o,$(C_SOURCES))

ARM_CXX_OFILES_TEMP=$(patsubst %.arm.cpp,$(OBJDIR_TEMP)/%.o,$(ARM_CXX_SOURCES))
ARM_C_OFILES_TEMP=$(patsubst %.arm.c,$(OBJDIR_TEMP)/%.o,$(ARM_C_SOURCES))

S_OFILES_TEMP=$(patsubst %.s,$(OBJDIR_TEMP)/%.o,$(S_SOURCES))
OFILES_TEMP=$(CXX_OFILES_TEMP) $(C_OFILES_TEMP) $(ARM_CXX_OFILES_TEMP) \
	$(ARM_C_OFILES_TEMP) $(S_OFILES_TEMP)


# Assembly source code generated by gcc/g++
CXX_ASMOUTS=$(patsubst %.thumb.cpp,$(ASMOUTDIR)/%.s,$(CXX_SOURCES))
C_ASMOUTS=$(patsubst %.thumb.c,$(ASMOUTDIR)/%.s,$(C_SOURCES))

ARM_CXX_ASMOUTS=$(patsubst %.arm.cpp,$(ASMOUTDIR)/%.s,$(ARM_CXX_SOURCES))
ARM_C_ASMOUTS=$(patsubst %.arm.c,$(ASMOUTDIR)/%.s,$(ARM_C_SOURCES))

ASMOUTS=$(CXX_ASMOUTS) $(C_ASMOUTS) $(ARM_CXX_ASMOUTS) $(ARM_C_ASMOUTS)



all : all_pre $(OFILES)
	@echo
	$(LD) $(OBJDIR)/*.o -o $(PROJ).elf $(LD_FLAGS) -Wl,-M > linker_map.txt
	$(OBJCOPY) -O binary -R .iwram -R .sram $(PROJ).elf $(PROJ).gba
	./do_gbafix.sh

all_objs : all_pre $(OFILES)
	@#

do_asmouts : all_pre all_pre_asmout $(ASMOUTS)
	@#

#debug : all_pre $(OFILES)
#	$(LD) $(OBJDIR)/*.o -o $(PROJ).elf $(LD_FLAGS) -g
#	$(OBJCOPY) -O binary $(PROJ).elf $(PROJ).gba

all_pre :
	mkdir -p $(OBJDIR) $(DEPDIR)

all_pre_asmout :
	mkdir -p $(ASMOUTDIR)




$(CXX_OFILES) : $(OBJDIR)/%.o : %.thumb.cpp
	@#echo "Generating dependency information for "$@"...."
	@echo $@" was updated or has no object file.  (Re)Compiling...."
	$(CXX) $(CXX_FLAGS) -MMD -c $< -o $@
	@cp $(OBJDIR)/$*.d $(DEPDIR)/$*.P
	@sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
		-e '/^$$/ d' -e 's/$$/ :/' < $(OBJDIR)/$*.d >> $(DEPDIR)/$*.P
	@rm -f $(OBJDIR)/$*.d

$(C_OFILES) : $(OBJDIR)/%.o : %.thumb.c
	@#echo "Generating dependency information for "$@"...."
	@echo $@" was updated or has no object file.  (Re)Compiling...."
	$(CC) $(C_FLAGS) -MMD -c $< -o $@
	@cp $(OBJDIR)/$*.d $(DEPDIR)/$*.P
	@sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
		-e '/^$$/ d' -e 's/$$/ :/' < $(OBJDIR)/$*.d >> $(DEPDIR)/$*.P
	@rm -f $(OBJDIR)/$*.d


$(ARM_CXX_OFILES) : $(OBJDIR)/%.o : %.arm.cpp
	@#echo "Generating dependency information for "$@"...."
	@echo $@" was updated or has no object file.  (Re)Compiling...."
	$(CXX) $(ARM_CXX_FLAGS) -MMD -c $< -o $@
	@cp $(OBJDIR)/$*.d $(DEPDIR)/$*.P
	@sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
		-e '/^$$/ d' -e 's/$$/ :/' < $(OBJDIR)/$*.d >> $(DEPDIR)/$*.P
	@rm -f $(OBJDIR)/$*.d

$(ARM_C_OFILES) : $(OBJDIR)/%.o : %.arm.c
	@#echo "Generating dependency information for "$@"...."
	@echo $@" was updated or has no object file.  (Re)Compiling...."
	$(CC) $(ARM_C_FLAGS) -MMD -c $< -o $@
	@cp $(OBJDIR)/$*.d $(DEPDIR)/$*.P
	@sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
		-e '/^$$/ d' -e 's/$$/ :/' < $(OBJDIR)/$*.d >> $(DEPDIR)/$*.P
	@rm -f $(OBJDIR)/$*.d


$(S_OFILES) : $(OBJDIR)/%.o : %.s
	@#echo "Generating dependency information for "$@"...."
	@echo $@" was updated or has no object file.  (Re)Compiling...."
	$(AS) $(S_FLAGS) -MD $(OBJDIR)/$*.d -c $< -o $@
	@cp $(OBJDIR)/$*.d $(DEPDIR)/$*.P
	@sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
		-e '/^$$/ d' -e 's/$$/ :/' < $(OBJDIR)/$*.d >> $(DEPDIR)/$*.P
	@rm -f $(OBJDIR)/$*.d





# Here we have stuff for outputting assembly source code instead of an object file.
$(C_ASMOUTS) : $(ASMOUTDIR)/%.s : %.thumb.c
	$(CC) $(C_FLAGS) -MMD -S -fverbose-asm $< -o $@
	@cp $(ASMOUTDIR)/$*.d $(DEPDIR)/$*.P
	@sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
		-e '/^$$/ d' -e 's/$$/ :/' < $(ASMOUTDIR)/$*.d >> $(DEPDIR)/$*.P
	@rm -f $(ASMOUTDIR)/$*.d
	

# See above comment.
$(CXX_ASMOUTS) : $(ASMOUTDIR)/%.s : %.thumb.cpp
	$(CXX) $(CXX_FLAGS) -MMD -S -fverbose-asm $< -o $@
	@cp $(ASMOUTDIR)/$*.d $(DEPDIR)/$*.P
	@sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
		-e '/^$$/ d' -e 's/$$/ :/' < $(ASMOUTDIR)/$*.d >> $(DEPDIR)/$*.P
	@rm -f $(ASMOUTDIR)/$*.d


# Here we have stuff for outputting assembly source code instead of an object file.
$(ARM_C_ASMOUTS) : $(ASMOUTDIR)/%.s : %.arm.c
	$(CC) $(ARM_C_FLAGS) -MMD -S -fverbose-asm $< -o $@
	@cp $(ASMOUTDIR)/$*.d $(DEPDIR)/$*.P
	@sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
		-e '/^$$/ d' -e 's/$$/ :/' < $(ASMOUTDIR)/$*.d >> $(DEPDIR)/$*.P
	@rm -f $(ASMOUTDIR)/$*.d
	

# See above comment.
$(ARM_CXX_ASMOUTS) : $(ASMOUTDIR)/%.s : %.arm.cpp
	$(CXX) $(ARM_CXX_FLAGS) -MMD -S -fverbose-asm $< -o $@
	@cp $(ASMOUTDIR)/$*.d $(DEPDIR)/$*.P
	@sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
		-e '/^$$/ d' -e 's/$$/ :/' < $(ASMOUTDIR)/$*.d >> $(DEPDIR)/$*.P
	@rm -f $(ASMOUTDIR)/$*.d



-include $(PFILES)


#¯\(°_o)/¯

.PHONY : clean
clean :
	rm -rfv $(ASMOUTDIR) $(OBJDIR) $(DEPDIR) linker_map.txt $(PROJ).elf $(PROJ).gba 

.PHONY : clean_objs_with_no_source
clean_objs_with_no_source :
	@mkdir -p $(OBJDIR_TEMP)
	@#ls $(OBJDIR)
	@echo "Removing object files that don't have corresponding source files...."
	@for objfile in $(OFILES); \
	do \
		if [ -f $$objfile ]; \
		then \
			mv $$objfile $(OBJDIR_TEMP); \
		fi; \
	done;
	@#ls $(OBJDIR_TEMP)
	@rm -rf $(OBJDIR)
	@mkdir -p $(OBJDIR)
	@for objfile in $(OFILES_TEMP); \
	do \
		if [ -f $$objfile ]; \
		then \
			mv $$objfile $(OBJDIR); \
		fi; \
	done;
	@#ls $(OBJDIR)
	@rmdir $(OBJDIR_TEMP)
	
	
	
	@#rm -rfv $(OBJDIR_TEMP)



# Note that -j8 is used on my laptop because its CPU is quad core with
# hyperthreading.
.PHONY : check_build
check_build :
	make clean_objs_with_no_source && make -j8



.PHONY : disassemble
disassemble :
	arm-none-eabi-objdump -marm7tdmi -d $(PROJ).elf

.PHONY : disassemble_all
disassemble_all :
	arm-none-eabi-objdump -marm7tdmi -D $(PROJ).elf


.PHONY : disassemble_2
disassemble_2 :
	arm-none-eabi-objdump -marm7tdmi -C -S -d $(PROJ).elf

.PHONY : disassemble_all_2
disassemble_all_2 :
	arm-none-eabi-objdump -marm7tdmi -C -S -D $(PROJ).elf
